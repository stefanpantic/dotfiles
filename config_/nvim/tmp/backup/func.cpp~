#include <iostream>
#include <vector>
#include <cmath>
#include <GL/glut.h>

using point = std::pair<int, int>;
using function_graph = std::vector<point>;

static int width{0}, height{0};
static function_graph plot;

void initializer(void);
void display(void);
void reshape(int w, int h);

int
main (int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(640, 480);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("draw");

	initializer();

	glutDisplayFunc(display);
	glutIdleFunc(display);
	glutReshapeFunc(reshape);

	glutMainLoop();

	return 0;
}

void initializer(void)
{
	glClearColor(0, 0, 0, 0);
	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LEQUAL);
}

void display(void)
{
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

	for(double i = 0; i < width; i += 0.001)
		plot.push_back({i, std::sin(i)*10});

	glBegin(GL_POLYGON);
	glColor3f(1, 0, 0);
	glLineWidth(10);
		for(auto e : plot)
			glVertex2i(e.first, e.second);
	glEnd();

	glutSwapBuffers();
	glFlush();
}

void reshape(int w, int h)
{
	width = w;
	height = h;

	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, w, 0, h);

	glutPostRedisplay();
}
