#!/usr/bin/python

import sys
import re
import os
import select
from tqdm import tqdm
import requests as req
from bs4 import BeautifulSoup as Supa

# defining the colors for output decoration
C_RED = "\x1b[31m"
C_GREEN = "\x1b[32m"
C_YELLOW = "\x1b[33m"
C_BLUE = "\x1b[34m"
C_RESET = "\x1b[0m"

# urls
yt_url = "https://www.youtube.com"
yt_dl = "http://www.yt2mp3.cc/"
yt_dl_grab = "http://www.yt2mp3.cc/grab?vidID="
yt_dl_format = "&format=mp3"

def download(url, name):
    # streaming so we can iteratr over the response
    r = req.get(url, stream=True)

    # total size in bytes - adjusted
    total_size = int(r.headers.get('content-length', 0))/(32*1024)

    with open(name + '.mp3', 'wb+') as song:
        for data in tqdm(r.iter_content(32*1024), total=total_size, unit='x32Kb', unit_scale=True):
            song.write(data)

def send_download_request(link):
    yt2mp3_page = req.get(yt_dl_grab + link + yt_dl_format)
    yt2mp3_soup = Supa(yt2mp3_page.text, 'html5lib')
    yt2mp3_page.close()

    return yt2mp3_soup.find('a', class_='download-mp3-url btn audio q320')

def timed_input(seconds):
    i, o, e = select.select([sys.stdin], [], [], seconds)
    if i:
        return sys.stdin.readline().strip().lower()
    else:
        return ""

def main():
    # make sure we have the appropriate number of command line arguments
    if 2 != len(sys.argv):
        exit(1)

    url = sys.argv[1].strip()

    # get and parse the youtube playlist
    page = req.get(url)
    page_text = page.text
    page.close()
    yt_soup = Supa(page_text, 'html5lib')

    # regExp for extracting the part of the link we need
    yt_href_pat = re.compile('href="(?:.*?)=([^&]+)(?:[^>]+)>([^<]+)')
    song_list = list()

    # make a new directory with the name of the playlist and cd into it
    # [:-10] removes the last 10 characters which are ' - YouTube' in this case
    pl_title = yt_soup.find('title').contents[0][:-10]
    os.mkdir(pl_title, 0o755)
    os.chdir(pl_title)

    print("Processing...")
    # extract the links and song names from YouTube
    all_links = yt_soup.find_all('a', class_='pl-video-title-link yt-uix-tile-link yt-uix-sessionlink spf-link ')
    for link in all_links:
        href_mtc = yt_href_pat.search(str(link));
        if None != href_mtc:
            song_list.append((href_mtc.group(1), href_mtc.group(2).strip()))
    print("Found %d entries, beginning download...\n" % len(all_links))

    # counters
    success = 0
    failure = 0

    # iterate through the song_list and download each song
    for song in song_list:
        print("%sDownloading:%s %s" % (C_GREEN, C_RESET, song[1]))

        # send a 'GET' request to yt2mp3.cc and retreive the download link
        dl_url = send_download_request(song[0])
        
        while None == dl_url:
            print("%sError...%s" % (C_RED, C_RESET))
            print("[retry (%sy%s/%sn%s), default=%sn%s]: " % (C_GREEN, C_RESET, C_RED, C_RESET, C_RED, C_RESET), end='', flush=True)
            resp = timed_input(5)[:1]
            if 'y' == resp:
                print("%sRetrying...%s" % (C_YELLOW, C_RESET))
                dl_url = send_download_request(song[0])
            else:
                print("%sFailed...\n%s" % (C_RED, C_RESET))
                failure += 1
                break

        if None != dl_url:
            download(yt_dl + dl_url['href'], song[1])
            print("%sDone...\n%s" % (C_BLUE, C_RESET))
            success += 1
    
    print("%sFinished...%s" % (C_GREEN, C_RESET))
    print("%sDownloaded:%s %d" % (C_BLUE, C_RESET, success))
    print("%sFailed:%s %d" % (C_RED, C_RESET, failure))

# call main() upon script exection
if "__main__" == __name__:
    main()
