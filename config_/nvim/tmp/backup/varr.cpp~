#include <iostream>
#include <vector>
#include <array>
#include <GL/glut.h>
#include <GL/freeglut.h>

double spin{1.0};

/*
static std::vector<float> vertex_data
{-0.5, -0.5, 0.0, 0.5, -0.5, 0.0, 0.0, 0.5, 0.0};

static std::vector<float> color_data
{0.9, 0.1, 0.3, 0.0, 0.5, 0.2, 0.1, 0.0, 0.9};
*/

// you can use a vector
static std::vector<float> vertex_color_data{
-0.5, -0.5, 0.0, 0.9, 0.1, 0.3, // point, color
0.5, -0.5, 0.0, 0.0, 0.5, 0.2,
0.0, 0.5, 0.0, 0.1, 0.0, 0.9};

// you can use an array
static std::array<float, 18> array_data{{
-0.9, -0.2, -0.8, 0.9, 0.9, 0.9,
0.1, -0.3, 0.5, 0.9, 0.9, 0.9,
-0.3, 0.7, -0.5, 0.1, 0.8, 0.9}};

void initializer(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);

	// setting depth information
	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LEQUAL);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// enable drawing from arrays
	glEnableClientState(GL_VERTEX_ARRAY);
	// enable coloring from arrays
	glEnableClientState(GL_COLOR_ARRAY);

		spin += 1.0;

		glLoadIdentity();
		glRotatef(spin, 0, 0, 1.0);
		glVertexPointer(3, GL_FLOAT, 6 * sizeof(float), vertex_color_data.data());
		glColorPointer(3, GL_FLOAT, 6*sizeof(float), vertex_color_data.data() + 3);
		glDrawArrays(GL_TRIANGLES, 0, 3);

// 		for a sequential homogenous array
//		glVertexPointer(3, GL_FLOAT, 0, vertex_data.data());
//		glColorPointer(3, GL_FLOAT, 0, color_data.data());

		glLoadIdentity();
		glRotatef(-spin, 0, 0, 1.0);
		glVertexPointer(3, GL_FLOAT, 6 * sizeof(float), array_data.data());
		glColorPointer(3, GL_FLOAT, 6*sizeof(float), array_data.data() + 3);
		glDrawArrays(GL_TRIANGLES, 0, 3);

	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_COLOR_ARRAY);

	glutSwapBuffers();
	glFlush();
}

void reshape(int w, int h)
{
	glViewport(0, 0, w, h);
	//glMatrixMode(GL_PROJECTION);
	//glLoadIdentity();
	//gluOrtho2D(0, w, 0, h);
}

int
main (int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
	glutInitWindowSize(640, 480);
	glutCreateWindow("Vertex Arrays");

	initializer();

	glutDisplayFunc(display);
	glutIdleFunc(display);
	glutReshapeFunc(reshape);

	glutMainLoop();

	return 0;
}
