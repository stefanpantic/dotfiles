#!/bin/python

import sys
import screen as scr
import math
from time import time

screen_line = scr.Screen(20, 20)
screen_circle = scr.Screen(20, 20)

def line_brute_force(x0, y0, x1, y1):
    dx = x1 - x0
    dy = y1 - y0
    m = dy/dx
    for x in range(x0, x1):
        y = m * (x - x0) + y0
        screen_line.set_pixel(x, int(math.floor(y + 0.5)))

def line_incremental(x0, y0, x1, y1):
    dx = x1 - x0
    dy = y1 - y0
    m = dy/dx
    y = y0
    for x in range(x0, x1):
        screen_line.set_pixel(x, int(math.floor(y + 0.5)))
        y += m

def line_midpoint(x0, y0, x1, y1):
    dx = x1 - x0
    dy = y1 - y0
    y = y0
    f = 2*dy - dx
    for x in range(x0, x1):
        screen_line.set_pixel(x, y)
        if f <= 0:
            f += 2 * dy
        else:
            y += 1
            f += 2 * (dy - dx)

def circle_midpoint(radius):
    x = 0
    y = radius
    d = 1 - radius
    screen_circle.set_pixel(x, y)
    while y > x:
        if d < 0:   # select E
            d += 2 * x + 3
            x += 1
        else:       # select NE
            d += 2 * (x - y) + 5
            x += 1
            y -= 1
        screen_circle.set_pixel(x, y)

def circle_midpoint_2(radius):
    x = 0
    y = radius
    d = 1 - radius
    deltaE = 3
    deltaSE = -2*radius + 5

    screen_circle.set_pixel(x, y)

    while y > x:
        if d < 0:   # select E
            d += deltaE
            deltaE += 2
            deltaSE += 2
            x += 1
        else:       # select NE
            d += deltaSE
            deltaE += deltaE + 2
            deltaSE += 4
            x += 1
            y -= 1

        screen_circle.set_pixel(x, y)

def main():

    if len(sys.argv) < 6:
        print("\x1b[31musage: x0 y0 x1 y1 r")
        sys.exit(1)

    x0 = int(sys.argv[1])
    y0 = int(sys.argv[2])
    x1 = int(sys.argv[3])
    y1 = int(sys.argv[4])
    r = int(sys.argv[5])

    print("Brute force algorithm (line): ")

    start = time()
    line_brute_force(x0, y0, x1, y1)
    screen_line.print_screen()
    print("Exectuon time: %f " % (time() - start))
    screen_line.clear()

    print("\nIncremental algorithm (line): ")

    start = time()
    line_incremental(x0, y0, x1, y1)
    screen_line.print_screen()
    print("Exectuon time: %f " % (time() - start))
    screen_line.clear()

    print("\nMidpoint algrotithm (line): ")

    start = time()
    line_midpoint(x0, y0, x1, y1)
    screen_line.print_screen()
    print("Exectuon time: %f " % (time() - start))
    screen_line.clear()

    print("\nMidpoint algorithm (circle): ")

    start = time()
    circle_midpoint(r)
    screen_circle.print_screen()
    print("Exectuon time: %f " % (time() - start))
    screen_circle.clear()

    print("\nMidpoint algorithm improved (circle): ")

    start = time()
    circle_midpoint(r)
    screen_circle.print_screen()
    print("Exectuon time: %f " % (time() - start))
    screen_circle.clear()


if '__main__' == __name__:
    main()
